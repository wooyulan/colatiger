// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"colatiger/internal/handler"
	"colatiger/internal/middleware"
	"colatiger/internal/repository"
	"colatiger/internal/server"
	"colatiger/internal/service"
	"colatiger/pkg/helper/sid"
	"colatiger/pkg/log"
	"colatiger/pkg/server/http"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*server.App, func(), error) {
	cors := middleware.NewCors()
	db := repository.NewDB(viperViper, logger)
	client := repository.NewRedis(viperViper)
	repositoryRepository := repository.NewRepository(logger, db, client)
	userRepo := repository.NewUserRepository(logger, repositoryRepository)
	sidSid := sid.NewSid()
	userService := service.NewUserService(userRepo, sidSid)
	jwtService := service.NewJwtService(viperViper, logger, userService)
	authHandler := handler.NewAuthHandler(logger, jwtService, userService)
	chatHandler := handler.NewChatHandler(logger)
	httpServer := server.NewHttpServer(logger, viperViper, cors, authHandler, chatHandler)
	app := newApp(httpServer)
	return app, func() {
	}, nil
}

// wire.go:

var serverSet = wire.NewSet(server.NewHttpServer)

// build App
func newApp(httpServer *http.Server) *server.App {
	return server.NewApp(server.WithServer(httpServer), server.WithName("cola-tiger-server"))
}
